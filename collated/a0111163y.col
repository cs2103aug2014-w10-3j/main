//@author: a0111163y



	/**
	 * origin: src\sg\codengineers\ldo\db\Database.java
	 */


package sg.codengineers.ldo.db;

/**
 * This class is the database abstraction layer that sits on top of the data
 * layer. It manages how data is handled within the program, decides where
 * to save all data and how to go about doing it. It chooses the appropriate
 * connector which saves the data diligently. All changes to the data must go
 * through this class
 */

import java.util.*;

public class Database {
	private static final int FIRST = 0;

	private Map<String, List<DBConnector>> classToConnector;
	
	private static Database database;
	private static boolean isInitialized = false;
	
	public static Database initDatabase() {
		if (!isInitialized) { 
			database = new Database();
		}
		return database;
	}

	/**
	 * Constructor This is where we choose which connector to use and
	 * initialize them accordingly.
	 */
	private Database() {
		classToConnector = DBConfig.initDatabases();
	}
	
	/**
	 * This allows a class to create a new instance which represents
	 * one entry in the database and save it to the database
	 * 
	 * @param data The data to be saved
	 * @param className The name of the model in question
	 */
	public boolean create(Object data, String className) {
		List<DBConnector> connectorList = classToConnector.get(className.toLowerCase());
		boolean success = true;

		for (DBConnector connector : connectorList) {
			// If anyone of the process fails, the whole operation fails
			success = success && connector.create(data);
		}
		return success;
	}
	
	/**
	 * This allows the model to get all entries in the database
	 * 
	 * @param className The name of the model in question
	 */
	public List<String> read(String className) {
		List<DBConnector> connectorList = classToConnector.get(className.toLowerCase());
		
		// Make sure that the first one is authoritative
		DBConnector authoritative = connectorList.get(FIRST);
		if (authoritative == null) {
			return null;
		} else {
			return authoritative.read();
		}
	}
	
	/**
	 * This allows the model to update an entry in the database
	 * 
	 * @param data The data to be updated
	 * @param className The name of the model in question
	 */
	public boolean update(Object data, String className) {
		List<DBConnector> connectorList = classToConnector.get(className.toLowerCase());
		boolean success = true;

		for (DBConnector connector : connectorList) {
			// If anyone of the process fails, the whole operation fails
			success = success &&connector.update(data);
		}
		return success;
	}
	
	/**
	 * This allows entries in the database to be deleted
	 * 
	 * @param id The id of the entry to be deleted
	 * @param className The name of the model in question
	 */
	public boolean delete(Object data, String className) {
		List<DBConnector> connectorList = classToConnector.get(className.toLowerCase());
		boolean success = true;
		
		for (DBConnector connector : connectorList) {
			// If anyone of the process fails, the whole operation fails
			success = success && connector.delete(data);
		}
		return success;
	}
	
	/**
	 * This method is used to clear the database of entries
	 * This is only meant for unit testing purposes, to ensure
	 * a clean state of the database so that the tests does not
	 * depend on the information already present
	 * 
	 * @param className The class name to clear out
	 * @return True if the operation succeeds
	 */
	public boolean clear(String className) {
		List<DBConnector> connectorList = classToConnector.get(className.toLowerCase());
		boolean success = true;
		
		for (DBConnector connector : connectorList) {
			// If anyone of the process fails, the whole operation fails
			success = success && connector.clear();
		}
		return success;
	}
	
	public void gCalAuth() {
		GCalDBConnector.auth();
	}
	
	public boolean loginGCal(String authCode) {
		GCalDBConnector gCal = GCalDBConnector.setup(authCode);
		List<DBConnector> connectorList = classToConnector.get("task");
		connectorList.add(gCal);
		classToConnector.put("task", connectorList);
		
		return (gCal == null);
	}
}

	// End of segment: src\sg\codengineers\ldo\db\Database.java





	/**
	 * origin: src\sg\codengineers\ldo\db\DatabaseTest.java
	 */


package sg.codengineers.ldo.db;

import static org.junit.Assert.*;
import org.junit.*;
import java.util.*;

public class DatabaseTest {
	private static Database db;
	
	private static final int FIRST = 0;
	private static final int SECOND = 1;
	private static final int THIRD = 2;
	
	@Before
	public void initDatabases() {
		db = Database.initDatabase();
		db.clear("Test");
	}
	
	@After
	public void clearDatabases() {
		db.clear("Test");
	}

	@Test
	public void testCreate() {
		// Create a new entry in the database
		boolean result = db.create("This is a test message", "Test");
		assertTrue(result);
		
		// Make sure it is there
		List<String> entries = db.read("Test");
		assertEquals("The entry is not the same as what is read",
				"This is a test message",
				entries.get(FIRST));
	}
	
	@Test
	public void testUpdate() {
		// Add a few messages in to test and make sure they are created
		boolean result = db.create("0<;>This is a test message", "Test");
		assertTrue(result);
		result = db.create("1<;>This is another test message", "Test");
		assertTrue(result);
		result = db.create("2<;>This is the last test message", "Test");
		assertTrue(result);
		
		// Update one of them
		result = db.update("2<;>This is an updated message", "Test");
		assertTrue(result);
		
		// Make sure that it is changed
		List<String> entries = db.read("Test");
		assertEquals("The message was not updated",
				"2<;>This is an updated message",
				entries.get(THIRD));
	}
	
	@Test
	public void testRead() {
		// Add a few messages in to test and make sure they are created
		boolean result = db.create("This is a test message", "Test");
		assertTrue(result);
		result = db.create("This is another test message", "Test");
		assertTrue(result);
		result = db.create("This is the last test message", "Test");
		assertTrue(result);
		
		// Read them and ensure that they are correct
		List<String> entries = db.read("Test");
		assertEquals("The first entry is not the same as what is read",
				"This is a test message",
				entries.get(FIRST));
		assertEquals("The second entry is not the same as what is read",
				"This is another test message",
				entries.get(SECOND));
		assertEquals("The third entry is not the same as what is read",
				"This is the last test message",
				entries.get(THIRD));
		
		// Clear the database and ensure nothing is read
		assertTrue(db.clear("Test"));
		assertTrue("The list returned should be empty", db.read("Test").isEmpty());
	}
	
	@Test
	public void testDelete() {
		// Add a few messages in to test and make sure they are created
		boolean result = db.create("0<;>This is a test message", "Test");
		assertTrue(result);
		result = db.create("1<;>This is another test message", "Test");
		assertTrue(result);
		result = db.create("2<;>This is the last test message", "Test");
		assertTrue(result);
		
		// Delete a message
		result = db.delete("2<;>This is the last test message", "Test");
		assertTrue(result);
		
		// Ensure that the entry is soft deleted
		List<String> entries = db.read("Test");
		assertEquals("The message was not deleted",
				"2<;>This is the last test message<;>deleted",
				entries.get(THIRD));
	}
	
	@Test
	public void testClear() {
		// Add a few messages in to test and make sure they are created
		boolean result = db.create("0<;>This is a test message", "Test");
		assertTrue(result);
		result = db.create("1<;>This is another test message", "Test");
		assertTrue(result);
		result = db.create("2<;>This is the last test message", "Test");
		assertTrue(result);
		
		// Clear the database
		result = db.clear("Test");
		assertTrue(result);

		// Ensure that the database is cleared
		List<String> entries = db.read("Test");
		assertTrue("The list returned should be empty", db.read("Test").isEmpty());
	}
}

	// End of segment: src\sg\codengineers\ldo\db\DatabaseTest.java





	/**
	 * origin: src\sg\codengineers\ldo\db\DBConfig.java
	 */


package sg.codengineers.ldo.db;

/**
 * This model defines the database configurations of the
 * program, including which model class has access to which
 * type of database. Each object represents one type of
 * configuration. It also helps to initialize all the 
 * database connections that the program has. This model is
 * special since it has direct connection to the database. 
 * This is done since initializing the database requires
 * information from the objects of this class, hence keeping
 * to the abstraction layers would inevitably result in a
 * circular definition.
 */

import java.util.*;

public class DBConfig {
	// Essential information for the configuration of the database
	private static DBConnector config;
	private static Map<String, DBConfig> configList;
	private static Map<String, List<DBConnector>> classToConnector;
	private static boolean isInitialized = false;
	
	// Filename of the config file
	private static final String FILENAME = "dbconfig";
	private static final String SEPERATOR = "<;>";
	
	private static final int FIRST_WORD = 0;
	private static final int SECOND_WORD = 1;
	private static final int TYPE_ARRAY = 2;	
	
	private static final String[] DEFAULT_SETTINGS = {"0<;>task<;>textfile", "1<;>test<;>textfile"};
	
	private String className;
	private List<String> types;
	private int id;

	/**
	 * Constructor
	 * 
	 * @param className The name of the class whose
	 * data is being saved
	 * @param types The types of database that the type
	 * of class has
	 */
	public DBConfig(String className, String[] types) {
		this.id = configList.size();
		this.className = className;
		this.types = new ArrayList<String>();
		
		for (String s : types) {
			this.types.add(s);
		}
	}
	
	/**
	 * Constructor
	 * 
	 * @param id The id of the object
	 * @param className The name of the class whose
	 * data is being saved
	 * @param types The types of database that the type
	 * of class has
	 */
	public DBConfig(int id, String className, String[] types) {
		this.id = id;
		this.className = className;
		this.types = new ArrayList<String>();
		
		for (String s : types) {
			this.types.add(s);
		}
	}

	public int getId() {
		return id;
	}
	
	/**
	 * Getter method for class name of the configuration
	 * 
	 * @return The name of the class
	 */

	public String getClassName() {
		return className;
	}
	
	/**
	 * Getter method for the array of types of database
	 * that the class can have
	 * 
	 * @return An list of the database types
	 */
	public List<String> getTypes() {
		return types;
	}
	
	public boolean addType(String type) {
		types.add(type);
		return true;
	}
	
	/**
	 * Initialize the different types of database connectors
	 * that a class can have
	 */
	private void initDB() {
		List<DBConnector> connectorList = null;

		if (classToConnector.containsKey(className)) {
			connectorList = classToConnector.get(className);
		} else {
			connectorList = new ArrayList<DBConnector>();
		}

		for (String s : types) {
			if (s.equalsIgnoreCase("textfile")) {
				connectorList.add(new TextDBConnector(className));
			} else if (s.equalsIgnoreCase("GCal")) {
				connectorList.add(new GCalDBConnector());
			}
		}
		
		classToConnector.remove(className);
		classToConnector.put(className, connectorList);
	}

	/**
	 * Initializes all the connections to the databases
	 * in accordance to the configurations in the config
	 * file
	 * 
	 * @return A mapping of the text representation of the
	 * class name to the database connector that it needs
	 */
	public static Map<String, List<DBConnector>> initDatabases() {
		if (!isInitialized) {

			/* 
			 * Open a connection to the config file, skipping
			 * the database abstraction layer. There is no way
			 * around this since this is needed to initialize 
			 * the layer.
			 */

			config = new TextDBConnector(FILENAME);
			List<String> textConfigList = config.read();
			
			// Use the default settings if there isn't any
			// existing settings
			if (textConfigList.isEmpty()) {
				textConfigList = addDefaultSettings();
			}
			
			classToConnector = new HashMap<String, List<DBConnector>>();
			configList = new HashMap<String, DBConfig>();

			for (String s : textConfigList) {
				DBConfig config = DBConfig.fromString(s);
				configList.put(config.getClassName(), config);
				config.initDB();
			}

			isInitialized = true;
		}

		return classToConnector;
	}
	
	public static void addNewSettings(String className, String type, DBConnector connector) {
		DBConfig dBConfig = configList.get(className);
		List<DBConnector> connectorList = classToConnector.get(className);
		
		if (dBConfig == null) {
			connectorList = new ArrayList<DBConnector>();
			String[] types = new String[] {type};
			dBConfig = new DBConfig(className, types);
			config.create(dBConfig);
			connectorList.add(connector);
			classToConnector.put(className, connectorList);
		} else {
			dBConfig.addType(type);
			config.update(dBConfig);
			connectorList.add(connector);
			classToConnector.put(className, connectorList);
		}
		
	}

	private static List<String> addDefaultSettings() {
		List<String> settings = new ArrayList<String>();

		for (String s : DEFAULT_SETTINGS) {
			config.create(s);
			settings.add(s);
		}		
		return settings;
	}
	
	/*****************************
	 * Convert to string
	 *****************************/

	public String toString() {
		String types = listToString(getTypes());		
		return getId() + SEPERATOR + getClassName()+ SEPERATOR + types;
	}
	
	public static DBConfig fromString(String entry) {
		int id = getIdFromEntry(entry);
		String className = getClassFromEntry(entry);
		String[] typeArray = getTypeFromEntry(entry);
		return new DBConfig(id, className, typeArray);
	}
	
	private static String listToString(List<String> list) {
		StringBuilder builder = new StringBuilder();
		
		for (String s : list) {
			builder.append(s);
			builder.append(",");
		}
		
		// Remove the last comma. Index starts from 0
		builder.deleteCharAt(builder.length() - 1);
		return builder.toString();
	}
	
	private static int getIdFromEntry(String entry) {
		return Integer.parseInt(entry.trim().split(SEPERATOR, 3)[FIRST_WORD]);
	}
	
	private static String getClassFromEntry(String entry) {
		return entry.trim().split(SEPERATOR, 3)[SECOND_WORD];
	}
	
	private static String[] getTypeFromEntry(String entry) {
		String types = entry.trim().split(SEPERATOR, 3)[TYPE_ARRAY];
		return types.split(",");
	}
}

	// End of segment: src\sg\codengineers\ldo\db\DBConfig.java





	/**
	 * origin: src\sg\codengineers\ldo\db\DBConnector.java
	 */


package sg.codengineers.ldo.db;

/**
 * This class is the connector between the database
 * implementation and the database abstraction layer
 */

import java.util.*;

public interface DBConnector {
	/**
	 * A create method to enter new data into the
	 * database.
	 * 
	 * @param data The data to be entered. It 
	 * must already be converted to string format using
	 * the toString implementation within the model
	 * @return true if the operation succeeds
	 */
	public boolean create(Object data);

	/**
	 * An update method that allows each entry in the
	 * database to be updated.
	 * 
	 * @param data The data to be updated. It 
	 * must already be converted to string format using
	 * the toString implementation within the model
	 * @return true if the operation succeeds
	 */
	public boolean update(Object data);
	
	/**
	 * A method that retrieves all entries from the
	 * database.
	 * 
	 * @return A list containing all the entries from
	 * the database
	 */
	public List<String> read();
	
	/**
	 * A method that deletes an entry from the database
	 * 
	 * @param id The unique identifier of the entry
	 * @return true if the operation succeeds
	 */
	public boolean delete(Object data);
	
	/**
	 * This method is used to clear the database of entries
	 * This is only meant for unit testing purposes, to ensure
	 * a clean state of the database so that the tests does not
	 * depend on the information already present
	 * 
	 * @return True if the operation succeeds
	 */
	public boolean clear();
}

	// End of segment: src\sg\codengineers\ldo\db\DBConnector.java





	/**
	 * origin: src\sg\codengineers\ldo\db\GCalDBConnector.java
	 */


	// The clientId and clientSecret can be found in Google Developers
	// Console
	private static final String CLIENT_ID = "300670791643-aqcjcpka4r18bnr53rl5vtvj2h88l9ga.apps.googleusercontent.com";
	private static final String CLIENT_SECRET = "pp9dS5SHzSEl_pu5hXw0ZFDk";
	private static final String CALENDAR_SUMMARY = "L'Do";
	private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
	private static final JacksonFactory JSON_FACTORY = new JacksonFactory();
	private static final String REFRESH_TOKEN = "refresh_token";
	private static final int SECOND = 1;

	// Or your redirect URL for web based applications.
	private static final String REDIRECT_URL = "urn:ietf:wg:oauth:2.0:oob";
	private static final String SCOPE = "https://www.googleapis.com/auth/calendar";
	private static final GoogleAuthorizationCodeFlow FLOW = new GoogleAuthorizationCodeFlow.Builder(
			HTTP_TRANSPORT, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET,
			Arrays.asList(CalendarScopes.CALENDAR))
			.setAccessType("offline").setApprovalPrompt("force").build();

	// No way around this since there is a name clash in the imported libraries
	private com.google.api.services.calendar.Calendar service = null;
	private List<Event> gCalEvents = null;
	private Calendar calendar = null;
	private String refreshToken = null;

	public GCalDBConnector() {
		refreshToken = loadRefreshToken();

		GoogleCredential credential = new GoogleCredential.Builder()
					.setJsonFactory(JSON_FACTORY)
					.setTransport(HTTP_TRANSPORT)
					.setClientSecrets(CLIENT_ID, CLIENT_SECRET)
					.build()
					.setRefreshToken(refreshToken);

		service = new com.google.api.services.calendar.Calendar
				.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
				.setApplicationName(CALENDAR_SUMMARY)
				.build();

		if (initCalendar()) {
			read();
		}
	}

	public GCalDBConnector(GoogleCredential credential, String token) {
		refreshToken = token;

		// Create a new authorized API client
		service = new com.google.api.services.calendar.Calendar
				.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
				.setApplicationName(CALENDAR_SUMMARY)
				.build();

		if (initCalendar()) {
			DBConfig.addNewSettings("task", "GCal", this);
			read();
		}
	}
	
	private boolean initCalendar() {
		try {
			List<CalendarListEntry> calendarList = service
					.calendarList()
					.list()
					.execute()
					.getItems();
			
			if (!isCalendarCreated(calendarList)) {
				calendar = new Calendar();
	
				calendar.setSummary(CALENDAR_SUMMARY);
				
				calendar = service
						.calendars()
						.insert(calendar)
						.execute();
			}

			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	@Override
	public boolean create(Object data) {
		try {
			Task task = convertToTask(data);
			Event event = taskToEvent(task);

			Event createdEvent = service
					.events()
					.insert(calendar.getId(), event)
					.execute();
			gCalEvents.add(createdEvent);

			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean update(Object data) {
		try {
			Task task = convertToTask(data);
			Event event = taskToEvent(task);

			service.events()
			.patch(calendar.getId(), event.getId(), event)
			.execute();

			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;	
		}
	}

	@Override
	public List<String> read() {
		try {
			Events events = service
					.events()
					.list(calendar.getId())
					.execute();
			gCalEvents = events.getItems();

			List<String> taskList = new ArrayList<String>();

			for (Event e : gCalEvents) {
				taskList.add(eventToTask(e).toString());
			}

			return taskList;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean delete(Object data) {
		try {			
			Task task = convertToTask(data);			
			Event event = taskToEvent(task);

			service.events()
			.delete(calendar.getId(), event.getId())
			.execute();

			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;	
		}
	}

	@Override
	public boolean clear() {
		// This method is not implemented here
		return false;
	}
	
	/**
	 * Starts the authentication process for google calendar
	 */
	public static void auth() {
		String url = FLOW.newAuthorizationUrl()
				.setRedirectUri(REDIRECT_URL)
				.build();
		try {
			if(Desktop.isDesktopSupported()) {
				// Windows
				Desktop.getDesktop().browse(new URI(url));
			} else {
				// Ubuntu
				Runtime runtime = Runtime.getRuntime();
				runtime.exec("/usr/bin/firefox -new-window " + url);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Sets up the connection to google calendar after
	 * receiving the authentication token
	 * 
	 * @param authCode The authentication token from google
	 * @return The connector object that can be used to
	 * interface with google calendar
	 */
	public static GCalDBConnector setup(String authCode) {
		try {
			GoogleTokenResponse response = FLOW.newTokenRequest(authCode)
					.setRedirectUri(REDIRECT_URL)
					.execute();
			GoogleCredential credential = new GoogleCredential.Builder()
					.setJsonFactory(JSON_FACTORY)
					.setTransport(HTTP_TRANSPORT)
					.setClientSecrets(CLIENT_ID, CLIENT_SECRET)
					.build()
					.setFromTokenResponse(response);
				
			String token = credential.getRefreshToken();
			saveRefreshToken(token);

			return new GCalDBConnector(credential, token);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public boolean isCalendarCreated(List<CalendarListEntry> list) {
		try {
			boolean isCreated = false;
			String calendarSummary;
			
			for (CalendarListEntry entry : list) {
				calendarSummary = entry.getSummary();
	
				if (calendarSummary.equals(CALENDAR_SUMMARY)) {
					calendar = service.calendars().get(entry.getId()).execute();
					isCreated = true;
				}
			}
			
			return isCreated;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Convert the object passed in to a task object
	 * This breaks some abstraction and might seem unclean
	 * but it is a good way of really separating the components
	 * and make the database layer really able to handle any
	 * model class
	 * 
	 * @param obj
	 * @return
	 */
	private static Task convertToTask(Object obj) {
		assert(obj instanceof Task);
		Task task = (Task) obj;
		return task;
	}
	
	private static Event taskToEvent(Task task) {
		Event event = new Event();
		
		event.setId("ldomanager" + String.valueOf(task.getId()));
		event.setSummary(task.getName());
		event.setDescription(task.getDescription());
		
		DateTime start = new DateTime(new Date());
		DateTime end = new DateTime(new Date());
		
		if (task.getStartTime() != null) {
			start = new DateTime(task.getStartTime());
		}
		
		if (task.getEndTime() != null) {
			end = new DateTime(task.getEndTime());
		}

		event.setStart(new EventDateTime().setDateTime(start));
		event.setEnd(new EventDateTime().setDateTime(end));
		
		return event;
	}
	
	private static Task eventToTask(Event event) {
		Task task = new TaskImpl();
		
		String eventId = event.getId();
		eventId = eventId.trim().split("r", 2)[SECOND];
		task.setId(Integer.parseInt(eventId));
		task.setName(event.getSummary());
		task.setDescription(event.getDescription());
		
		task.setTimeStart(new Date(event.getStart().getDateTime().getValue()));
		task.setTimeStart(new Date(event.getEnd().getDateTime().getValue()));
		
		return task;
	}
	
	private static boolean saveRefreshToken(String refreshToken) {
		try {
			File file = initTokenFile();
			
			BufferedWriter bw = new BufferedWriter(new FileWriter(file));
			bw.write(refreshToken);
			bw.close();
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	private static String loadRefreshToken() {
		try {
			File file = initTokenFile();
			
			BufferedReader br = new BufferedReader(new FileReader(file));
			String result = br.readLine();
			br.close();
			
			return result;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	private static File initTokenFile() {
		try {
			File file = new File(REFRESH_TOKEN);
			if (!file.exists()) {
				file.createNewFile();
			}
			return file;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
}

	// End of segment: src\sg\codengineers\ldo\db\GCalDBConnector.java





	/**
	 * origin: src\sg\codengineers\ldo\db\TextDBConnector.java
	 */


package sg.codengineers.ldo.db;

/**
 * This class is the implementation of the DBConnector
 * interface. Specifically, it is the connection between
 * the program and a textfile representation of the data
 * in the program.
 */

import java.io.*;
import java.util.*;

public class TextDBConnector implements DBConnector {
	private static final String SEPARATOR = "<;>";
	private static final int FIRST_WORD = 0;

	private String filename;
	private File file;
	private List<String> dataList;

	/**
	 * Constructor
	 * 
	 * @param filename The name of the file to save the data to
	 * @throws IOException
	 */
	public TextDBConnector(String filename) {
		this.filename = filename;
		if (initFile()) {
			dataList = read();
		}		
	}

	/**
	 * Initializes the file to make sure it exist before any IO
	 * operations are performed on it. Create a new file with the
	 * supplied filename if the file does not already exist
	 * 
	 * @return true if the operation succeeds
	 */
	private boolean initFile() {
		try {
			file = new File(filename);

			if (!file.exists()) {
				file.createNewFile();
			}
			return true;
		} catch(IOException e) {
			e.printStackTrace();
			System.exit(1);
			return false;
		}
	}

	@Override
	public boolean create(Object data) {
		return write(data.toString());
	}

	/**
	 * This method writes one data to the database
	 * 
	 * @param data The data to be written
	 * @return true if the operation succeeds
	 */
	private boolean write(String data) {
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(file, true));
			
			// Defensive code
			if (dataList == null || dataList.isEmpty()) {
				dataList = read();
			}

			bw.write(data);
			
			// A new line represents the separation of data
			bw.newLine();
			bw.close();
			
			// The dataList would exist by now
			dataList.add(data);
			return true;
		} catch(IOException e) {
			e.printStackTrace();
			System.exit(1);
			return false;
		}
	}

	@Override
	public boolean update(Object data) {
		int id = Integer.parseInt(data
				.toString()
				.trim()
				.split(SEPARATOR)[FIRST_WORD]);
		dataList.remove(id);
		dataList.add(id, data.toString());
		return writeList();
	}

	/**
	 * This method rewrites the database with the data in the list
	 * 
	 * @return true if the operation succeeds
	 */
	private boolean writeList() {
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(file));
			
			for (String s : dataList) {
				bw.write(s);
				bw.newLine();
			}
			
			bw.close();
			return true;
		} catch(IOException e) {
			e.printStackTrace();
			System.exit(1);
			return false;
		}
	}

	@Override
	public List<String> read() {
		try {
			// Defensive check
			if (dataList == null || dataList.isEmpty()) {
				dataList = new ArrayList<String>();
				
				BufferedReader br = new BufferedReader(new FileReader(file));
				String line;

				while ((line = br.readLine()) != null) {
					dataList.add(line);
				}
		
				br.close();
			}
			
			return dataList;
		} catch(IOException e) {
			e.printStackTrace();
			System.exit(1);
			return null;
		}
	}

	@Override
	public boolean delete(Object data) {
		return update(data.toString() + SEPARATOR + "deleted");
	}

	@Override
	public boolean clear() {
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(file));
			
			bw.write("");			
			bw.close();
			dataList.clear();

			return true;
		} catch(IOException e) {
			e.printStackTrace();
			System.exit(1);
			return false;
		}
	}
}

	// End of segment: src\sg\codengineers\ldo\db\TextDBConnector.java





